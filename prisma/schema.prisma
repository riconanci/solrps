// prisma/schema.prisma - UPDATED TO STORE ALICE'S ACTUAL MOVES
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  displayName  String?
  mockBalance  Int    @default(0)
  createdAt    DateTime @default(now())
  
  // Relationships
  createdSessions Session[] @relation("CreatorSessions")
  joinedSessions  Session[] @relation("ChallengerSessions")
  matchResults    MatchResult[]
  weeklyRewards   WeeklyReward[]
  devRewards      DevReward[]

  @@map("users")
}

model Session {
  id              String   @id @default(cuid())
  status          String   @default("OPEN") // OPEN, AWAITING_REVEAL, RESOLVED
  rounds          Int
  stakePerRound   Int
  totalStake      Int
  commitHash      String
  saltHint        String?
  createdAt       DateTime @default(now())
  revealDeadline  DateTime
  isPrivate       Boolean  @default(false)
  resolvedAt      DateTime?

  // Creator information
  creatorId       String
  creator         User     @relation("CreatorSessions", fields: [creatorId], references: [id])
  
  // NEW FIELDS: Store Alice's actual moves and salt
  creatorMoves    String?  // JSON string of Move[] - Alice's actual selected moves
  creatorSalt     String?  // Salt used for commit hash
  creatorRevealed Boolean  @default(false)

  // Challenger information
  challengerId    String?
  challenger      User?    @relation("ChallengerSessions", fields: [challengerId], references: [id])
  challengerMoves String?  // JSON string of Move[]

  // Results
  result          MatchResult?

  @@map("sessions")
}

model MatchResult {
  id            String   @id @default(cuid())
  sessionId     String   @unique
  session       Session  @relation(fields: [sessionId], references: [id])
  
  // Game outcome
  winnerUserId  String?
  winner        User?    @relation(fields: [winnerUserId], references: [id])
  creatorWins   Int      @default(0)
  challengerWins Int     @default(0)
  draws         Int      @default(0)
  
  // Financial details
  pot           Int
  payoutWinner  Int      @default(0)
  payoutLoser   Int      @default(0)
  
  // Fee breakdown
  feeTotal      Int      @default(0)
  feeTreasury   Int      @default(0)
  feeBurn       Int      @default(0)
  feeDev        Int      @default(0)
  feeWeekly     Int      @default(0)
  
  // Additional data
  roundsOutcome String?  // JSON string of round-by-round results
  replaySeed    String?
  
  createdAt     DateTime @default(now())

  @@map("match_results")
}

// Weekly rewards system
model WeeklyPeriod {
  id               String   @id @default(cuid())
  weekStart        DateTime @unique
  weekEnd          DateTime
  totalRewardsPool Int      @default(0)
  rolloverAmount   Int      @default(0)  // Amount rolled over from previous week
  isDistributed    Boolean  @default(false)
  distributedAt    DateTime?
  
  rewards          WeeklyReward[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("weekly_periods")
}

model WeeklyReward {
  id            String       @id @default(cuid())
  weeklyPeriodId String
  weeklyPeriod  WeeklyPeriod @relation(fields: [weeklyPeriodId], references: [id])
  
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  
  rank          Int
  points        Int
  rewardAmount  Int
  isClaimed     Boolean      @default(false)
  claimedAt     DateTime?
  
  createdAt     DateTime     @default(now())

  @@unique([weeklyPeriodId, userId])
  @@map("weekly_rewards")
}

model DevReward {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Int
  isClaimed   Boolean  @default(false)
  claimedAt   DateTime?
  createdAt   DateTime @default(now())

  @@map("dev_rewards")
}