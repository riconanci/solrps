// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  displayName  String?
  walletPubkey String?
  mockBalance  Int      @default(100000)

  sessions     Session[] @relation("creatorSessions")
  challenges   Session[] @relation("challengerSessions")
  wins         MatchResult[] @relation("winnerRelation")
  weeklyRewards WeeklyReward[] @relation("userWeeklyRewards")

  @@map("users")
}

model Session {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  status          String   // OPEN, LOCKED, AWAITING_REVEAL, RESOLVED, FORFEITED, CANCELLED
  rounds          Int
  stakePerRound   Int
  totalStake      Int
  commitHash      String
  saltHint        String?
  creatorId       String
  creator         User     @relation("creatorSessions", fields: [creatorId], references: [id])
  challengerId    String?
  challenger      User?    @relation("challengerSessions", fields: [challengerId], references: [id])
  creatorRevealed Boolean  @default(false)
  revealDeadline  DateTime
  isPrivate       Boolean  @default(false)
  privateCode     String?  @unique
  creatorMoves    Json?    // PostgreSQL native JSON
  challengerMoves Json?    // PostgreSQL native JSON
  result          MatchResult?

  @@map("sessions")
}

model MatchResult {
  id               String   @id @default(cuid())
  sessionId        String   @unique
  session          Session  @relation(fields: [sessionId], references: [id])
  createdAt        DateTime @default(now())
  roundsOutcome    Json     // PostgreSQL native JSON
  creatorWins      Int
  challengerWins   Int
  draws            Int
  overall          String   // CREATOR, CHALLENGER, DRAW
  pot              Int
  feesBurn         Int
  feesTreasury     Int
  feesDev          Int      @default(0) // New dev fee field
  feesWeeklyRewards Int     @default(0) // New weekly rewards field
  payoutWinner     Int
  winnerUserId     String?
  winner           User?    @relation("winnerRelation", fields: [winnerUserId], references: [id])
  replaySeed       String?

  @@map("match_results")
}

// New table for weekly leaderboard periods
model WeeklyPeriod {
  id        String   @id @default(cuid())
  weekStart DateTime @unique // Monday 12am UTC
  weekEnd   DateTime // Next Monday 12am UTC
  createdAt DateTime @default(now())
  
  // Weekly stats
  totalRewardsPool Int @default(0)
  totalMatches     Int @default(0)
  isDistributed    Boolean @default(false)
  distributedAt    DateTime?
  
  // Relations
  rewards WeeklyReward[]
  
  @@map("weekly_periods")
}

// Table for weekly reward distributions
model WeeklyReward {
  id       String @id @default(cuid())
  
  // Period reference
  weeklyPeriodId String
  weeklyPeriod   WeeklyPeriod @relation(fields: [weeklyPeriodId], references: [id])
  
  // User reference
  userId   String
  user     User   @relation("userWeeklyRewards", fields: [userId], references: [id])
  
  // Reward details
  rank     Int    // 1-10 for top 10
  points   Int    // Total points earned that week
  rewardAmount Int // Tokens to be claimed
  
  // Claim status
  isClaimed Boolean @default(false)
  claimedAt DateTime?
  
  createdAt DateTime @default(now())
  
  @@unique([weeklyPeriodId, userId])
  @@map("weekly_rewards")
}

// New table to track dev fee accumulation
model DevReward {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  amount        Int      // Amount accumulated
  isClaimed     Boolean  @default(false)
  claimedAt     DateTime?
  description   String?  // Optional description
  
  @@map("dev_rewards")
}